---
description: 
globs: 
alwaysApply: true
---
# Widget Separation and Reusability

To improve code organization, maintainability, and reusability, large widgets should be broken down into smaller, more focused components.

## Principle
- **Single Responsibility:** Each widget should ideally handle one specific part of the UI or functionality.
- **Extract Logic:** If a part of the UI has its own state or complex build logic, it's a good candidate for extraction.

## Benefits
- **Readability:** Smaller widgets are easier to understand.
- **Maintainability:** Changes to one part of the UI are localized.
- **Reusability:** Components can be reused across different screens or parts of the app.
- **Testability:** Smaller, independent widgets are easier to test.

## How to Refactor
1.  Identify distinct visual or logical sections within a large widget's `build` method.
2.  Extract these sections into separate `StatelessWidget` or `StatefulWidget` (or `ConsumerWidget`/`ConsumerStatefulWidget` if they need access to Riverpod providers) classes.
3.  Pass necessary data down to the extracted widgets via their constructors.
4.  If a widget is intended for use across multiple screens, place it in the `lib/widgets/` directory (e.g., [async_value_widget.dart](mdc:lib/widgets/async_value_widget.dart)).
5.  If a widget is specific to a single screen but significantly complex, it can be defined within the same screen file or a dedicated sub-directory for that screen's components.

## Example Scenario
Instead of having a single `build` method in [home_screen.dart](mdc:lib/screens/home_screen.dart) that constructs the title, the animated upload area, and the bottom toggle section, consider extracting:
- The animated upload circle into its own widget (`UploadButtonAnimation`?)
- The bottom toggle/store link section into its own widget (`HomeBottomControls`?)

This makes the main `build` method of `HomeScreen` simpler, primarily orchestrating the layout of these larger extracted components.

Strive to keep widget `build` methods concise and focused. Regularly review large widgets for potential refactoring opportunities.
